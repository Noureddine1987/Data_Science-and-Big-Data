

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

%matplotlib inline

# loading data using pandas function pd.read_csv()

df = pd.read_csv('USA_Housing.csv')

df.head()

	Avg. Area Income 	Avg. Area House Age 	Avg. Area Number of Rooms 	Avg. Area Number of Bedrooms 	Area Population 	Price 	Address
0 	79545.458574 	5.682861 	7.009188 	4.09 	23086.800503 	1.059034e+06 	208 Michael Ferry Apt. 674\nLaurabury, NE 3701...
1 	79248.642455 	6.002900 	6.730821 	3.09 	40173.072174 	1.505891e+06 	188 Johnson Views Suite 079\nLake Kathleen, CA...
2 	61287.067179 	5.865890 	8.512727 	5.13 	36882.159400 	1.058988e+06 	9127 Elizabeth Stravenue\nDanieltown, WI 06482...
3 	63345.240046 	7.188236 	5.586729 	3.26 	34310.242831 	1.260617e+06 	USS Barnett\nFPO AP 44820
4 	59982.197226 	5.040555 	7.839388 	4.23 	26354.109472 	6.309435e+05 	USNS Raymond\nFPO AE 09386

df.info()

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5000 entries, 0 to 4999
Data columns (total 7 columns):
Avg. Area Income                5000 non-null float64
Avg. Area House Age             5000 non-null float64
Avg. Area Number of Rooms       5000 non-null float64
Avg. Area Number of Bedrooms    5000 non-null float64
Area Population                 5000 non-null float64
Price                           5000 non-null float64
Address                         5000 non-null object
dtypes: float64(6), object(1)
memory usage: 253.9+ KB

df.describe()

	Avg. Area Income 	Avg. Area House Age 	Avg. Area Number of Rooms 	Avg. Area Number of Bedrooms 	Area Population 	Price
count 	5000.000000 	5000.000000 	5000.000000 	5000.000000 	5000.000000 	5.000000e+03
mean 	68583.108984 	5.977222 	6.987792 	3.981330 	36163.516039 	1.232073e+06
std 	10657.991214 	0.991456 	1.005833 	1.234137 	9925.650114 	3.531176e+05
min 	17796.631190 	2.644304 	3.236194 	2.000000 	172.610686 	1.593866e+04
25% 	61480.562388 	5.322283 	6.299250 	3.140000 	29403.928702 	9.975771e+05
50% 	68804.286404 	5.970429 	7.002902 	4.050000 	36199.406689 	1.232669e+06
75% 	75783.338666 	6.650808 	7.665871 	4.490000 	42861.290769 	1.471210e+06
max 	107701.748378 	9.519088 	10.759588 	6.500000 	69621.713378 	2.469066e+06

df.columns

Index(['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
       'Avg. Area Number of Bedrooms', 'Area Population', 'Price', 'Address'],
      dtype='object')

sns.pairplot(df)

<seaborn.axisgrid.PairGrid at 0x9006850>

sns.distplot(df['Price'])

<matplotlib.axes._subplots.AxesSubplot at 0xd045bd0>

df.corr()

#sns.heatmap(df.corr())

	Avg. Area Income 	Avg. Area House Age 	Avg. Area Number of Rooms 	Avg. Area Number of Bedrooms 	Area Population 	Price
Avg. Area Income 	1.000000 	-0.002007 	-0.011032 	0.019788 	-0.016234 	0.639734
Avg. Area House Age 	-0.002007 	1.000000 	-0.009428 	0.006149 	-0.018743 	0.452543
Avg. Area Number of Rooms 	-0.011032 	-0.009428 	1.000000 	0.462695 	0.002040 	0.335664
Avg. Area Number of Bedrooms 	0.019788 	0.006149 	0.462695 	1.000000 	-0.022168 	0.171071
Area Population 	-0.016234 	-0.018743 	0.002040 	-0.022168 	1.000000 	0.408556
Price 	0.639734 	0.452543 	0.335664 	0.171071 	0.408556 	1.000000

sns.heatmap(df.corr(), annot = True)

<matplotlib.axes._subplots.AxesSubplot at 0xd98cbd0>

df.columns

?

Index(['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
       'Avg. Area Number of Bedrooms', 'Area Population', 'Price', 'Address'],
      dtype='object')

X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',

       'Avg. Area Number of Bedrooms', 'Area Population']]

y = df['Price']

from sklearn.cross_validation import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.4, random_state =101)

from sklearn.linear_model import LinearRegression

lm = LinearRegression()

lm.fit(X_train,y_train)

LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)

print(lm.intercept_)

-2640159.7968516243

lm.coef_

array([2.15282755e+01, 1.64883282e+05, 1.22368678e+05, 2.23380186e+03,
       1.51504200e+01])

X.columns

Index(['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
       'Avg. Area Number of Bedrooms', 'Area Population'],
      dtype='object')

cdf = pd.DataFrame(lm.coef_,X.columns, columns=['Coeff'])

cdf

	Coeff
Avg. Area Income 	21.528276
Avg. Area House Age 	164883.282027
Avg. Area Number of Rooms 	122368.678027
Avg. Area Number of Bedrooms 	2233.801864
Area Population 	15.150420

from sklearn.datasets import load_boston

boston = load_boston()

boston.keys()

dict_keys(['data', 'target', 'feature_names', 'DESCR'])

print(boston['DESCR'])

Boston House Prices dataset
===========================

Notes
------
Data Set Characteristics:  

    :Number of Instances: 506 

    :Number of Attributes: 13 numeric/categorical predictive
    
    :Median Value (attribute 14) is usually the target

    :Attribute Information (in order):
        - CRIM     per capita crime rate by town
        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.
        - INDUS    proportion of non-retail business acres per town
        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)
        - NOX      nitric oxides concentration (parts per 10 million)
        - RM       average number of rooms per dwelling
        - AGE      proportion of owner-occupied units built prior to 1940
        - DIS      weighted distances to five Boston employment centres
        - RAD      index of accessibility to radial highways
        - TAX      full-value property-tax rate per $10,000
        - PTRATIO  pupil-teacher ratio by town
        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town
        - LSTAT    % lower status of the population
        - MEDV     Median value of owner-occupied homes in $1000's

    :Missing Attribute Values: None

    :Creator: Harrison, D. and Rubinfeld, D.L.

This is a copy of UCI ML housing dataset.
http://archive.ics.uci.edu/ml/datasets/Housing


This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.

The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic
prices and the demand for clean air', J. Environ. Economics & Management,
vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics
...', Wiley, 1980.   N.B. Various transformations are used in the table on
pages 244-261 of the latter.

The Boston house-price data has been used in many machine learning papers that address regression
problems.   
     
**References**

   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.
   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.
   - many more! (see http://archive.ics.uci.edu/ml/datasets/Housing)

print(boston['data'])

[[6.3200e-03 1.8000e+01 2.3100e+00 ... 1.5300e+01 3.9690e+02 4.9800e+00]
 [2.7310e-02 0.0000e+00 7.0700e+00 ... 1.7800e+01 3.9690e+02 9.1400e+00]
 [2.7290e-02 0.0000e+00 7.0700e+00 ... 1.7800e+01 3.9283e+02 4.0300e+00]
 ...
 [6.0760e-02 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9690e+02 5.6400e+00]
 [1.0959e-01 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9345e+02 6.4800e+00]
 [4.7410e-02 0.0000e+00 1.1930e+01 ... 2.1000e+01 3.9690e+02 7.8800e+00]]

print(boston['feature_names'])

['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'
 'B' 'LSTAT']

Predictions

predictions = lm.predict(X_test)

plt.scatter(y_test,predictions)

<matplotlib.collections.PathCollection at 0xf1a59f0>

predictions

array([1260960.70567625,  827588.75560359, 1742421.24254323, ...,
        372191.40626965, 1365217.15140894, 1914519.54178805])

# Histograms of residuals 

sns.distplot((y_test-predictions))

<matplotlib.axes._subplots.AxesSubplot at 0xf1a5e70>

from sklearn import metrics 

metrics.mean_absolute_error(y_test, predictions)

82288.22251914963

metrics.mean_squared_error(y_test, predictions)

10460958907.209696

np.sqrt(metrics.mean_squared_error(y_test, predictions))

102278.82922291248

?
