

import pandas as pd

import numpy as np

?

import matplotlib.pyplot as plt

import seaborn as sns

%matplotlib inline

ad_data = pd.read_csv("advertising.csv")

ad_data.head(2)

	Daily Time Spent on Site 	Age 	Area Income 	Daily Internet Usage 	Ad Topic Line 	City 	Male 	Country 	Timestamp 	Clicked on Ad
0 	68.95 	35 	61833.90 	256.09 	Cloned 5thgeneration orchestration 	Wrightburgh 	0 	Tunisia 	2016-03-27 00:53:11 	0
1 	80.23 	31 	68441.85 	193.77 	Monitored national standardization 	West Jodi 	1 	Nauru 	2016-04-04 01:39:02 	0

ad_data.info()

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1000 entries, 0 to 999
Data columns (total 10 columns):
Daily Time Spent on Site    1000 non-null float64
Age                         1000 non-null int64
Area Income                 1000 non-null float64
Daily Internet Usage        1000 non-null float64
Ad Topic Line               1000 non-null object
City                        1000 non-null object
Male                        1000 non-null int64
Country                     1000 non-null object
Timestamp                   1000 non-null object
Clicked on Ad               1000 non-null int64
dtypes: float64(3), int64(3), object(4)
memory usage: 62.5+ KB

ad_data.describe()

	Daily Time Spent on Site 	Age 	Area Income 	Daily Internet Usage 	Male 	Clicked on Ad
count 	1000.000000 	1000.000000 	1000.000000 	1000.000000 	1000.000000 	1000.00000
mean 	65.000200 	36.009000 	55000.000080 	180.000100 	0.481000 	0.50000
std 	15.853615 	8.785562 	13414.634022 	43.902339 	0.499889 	0.50025
min 	32.600000 	19.000000 	13996.500000 	104.780000 	0.000000 	0.00000
25% 	51.360000 	29.000000 	47031.802500 	138.830000 	0.000000 	0.00000
50% 	68.215000 	35.000000 	57012.300000 	183.130000 	0.000000 	0.50000
75% 	78.547500 	42.000000 	65470.635000 	218.792500 	1.000000 	1.00000
max 	91.430000 	61.000000 	79484.800000 	269.960000 	1.000000 	1.00000

ad_data['Age'].plot.hist(bins=30)

<matplotlib.axes._subplots.AxesSubplot at 0x9bbe550>

sns.jointplot(x="Age", y= 'Area Income', data = ad_data)

<seaborn.axisgrid.JointGrid at 0x6989930>

sns.jointplot(x="Age", y= 'Daily Time Spent on Site', data = ad_data, kind = 'kde')

<seaborn.axisgrid.JointGrid at 0xd554f30>

sns.jointplot(x='Daily Time Spent on Site', y='Daily Internet Usage', data = ad_data)

<seaborn.axisgrid.JointGrid at 0xd51ab10>

sns.pairplot(ad_data, hue='Clicked on Ad')

<seaborn.axisgrid.PairGrid at 0xd6371f0>

from sklearn.cross_validation import train_test_split

ad_data.head(1)

	Daily Time Spent on Site 	Age 	Area Income 	Daily Internet Usage 	Ad Topic Line 	City 	Male 	Country 	Timestamp 	Clicked on Ad
0 	68.95 	35 	61833.9 	256.09 	Cloned 5thgeneration orchestration 	Wrightburgh 	0 	Tunisia 	2016-03-27 00:53:11 	0

X = ad_data[['Daily Time Spent on Site','Age','Area Income','Daily Internet Usage','Male']]

?

y = ad_data['Clicked on Ad']

?

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()

?

logmodel.fit(X_train, y_train)

LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0, warm_start=False)

predictions = logmodel.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,predictions))

print(confusion_matrix(y_test, predictions))

             precision    recall  f1-score   support

          0       0.91      0.95      0.93       157
          1       0.94      0.90      0.92       143

avg / total       0.92      0.92      0.92       300

[[149   8]
 [ 15 128]]

?

?

?

?

?

?

?

